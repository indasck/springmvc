package com.microservice.ApiGateway.client;

import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.http.HttpHeaders;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;

import reactor.core.publisher.Mono;

@Component
public class ClientFilter implements GlobalFilter {

    @Value("${secret.key}")
    private String secretKey;

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        System.out.println("filter()...execute");

        ServerHttpRequest request = exchange.getRequest();
        HttpHeaders headers = request.getHeaders();
        Set<String> keyset = headers.keySet();

        if (!keyset.contains("secret")) {
            System.out.println("Missing 'secret' header.");
            return Mono.error(new RuntimeException("Missing 'secret' header."));
        }

        List<String> secretValues = headers.get("secret");
        if (secretValues == null || secretValues.isEmpty() || !secretValues.get(0).equals(secretKey)) {
            System.out.println("Invalid 'secret' header value.");
            return Mono.error(new RuntimeException("Invalid 'secret' header value."));
        }

        System.out.println("Request passed filter checks.");
        return chain.filter(exchange);
    }
}
